import scala.collection.mutable.ListBuffer

/**
  *
  * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
  *
  * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
  *
  * Let us list the factors of the first seven triangle numbers:
  *
  * 1: 1
  * 3: 1,3
  * 6: 1,2,3,6
  * 10: 1,2,5,10
  * 15: 1,3,5,15
  * 21: 1,3,7,21
  * 28: 1,2,4,7,14,28
  *
  * We can see that 28 is the first triangle number to have over five divisors.
  *
  * What is the value of the first triangle number to have over five hundred divisors?
  *
  * https://projecteuler.net/problem=12
  *
  */


/**
  * TODO: make the execution faster
  * 76576500
  * real    4m9.586s
  * user    4m6.937s
  * sys     0m1.317s
  *
  * @param x
  * @return A number of divisors for x
  */
def divisors(x: Int): Int = {
  var count = 3

  // skip prime numbers
  if (x % 2 != 0) {
    return 0
  }
  for (j <- 3 to x/2) {
    if (x % j == 0) {
      count += 1
    }
  }
  count
}

/**
  * Generate prime number factors
  * Calculate possible distinct divisors
  */
var primes = scala.collection.mutable.ListBuffer[Int](2, 3)
def divisorsComplex(x: Int): Int = {
  var pIdx = 0
  var n = x
  var factors: ListBuffer[Int] = ListBuffer()
  while (primes(pIdx) <= n / 2) {
    if (n % primes(pIdx) == 0) {
      factors += primes(pIdx)
      n /= primes(pIdx)
    } else {
      pIdx += 1
      if (pIdx < primes.size) {
        // generate next prime number
        var i = primes.last + 2
        while (!primes.forall(p => i % p != 0)) {
          i = i + 2
        }
        primes += i
      }

    }
  }

  factors += n
  def factorsToDivs(factors: List[Int], m: Int = 1): List[Int] = {
    if (factors.length == 0) {
      return List()
    }
    factors.union(factorsToDivs(factors.drop(1), factors(0))).distinct.map(_ * m).toList

  }
  factorsToDivs(factors.toList).size + 1
}

var i = 1
var current = 1

while (divisors(current) <= 500) {
  i += 1
  current += i
}


//76576500 for 500 divisors
//2162160 for 300 divisors
println(current)
